=====================
Intro
=====================
THIS IS JUST A EXPERIMENTAL TOOL!

Mitigate high SLC miss rate issue caused by CMN700 bug.
Before using this tool, you need to check if your workload met the issue!!

If following indicators are relatively high when running the application with 
multiple cores compared with one core, then you may encounter the CMN issue. 

    - Check if cmn0-CompData_SC/cmn0-MC_Reqs ratio is abnormally high. 
        sudo perf stat -I 1000 -e arm_cmn_0/name=cmn0-CompData_SC,watchpoint_up,bynodeid=1,nodeid=160,wp_dev_sel=0,wp_chn_sel=3,wp_grp=0,wp_val=0x0000003910000000,wp_mask=0xffffff80c3ffffff/  -e arm_cmn_0/name=cmn0-MC_Reqs,hnf_mc_reqs,nodeid=160,bynodeid=1/

    - Check SLC miss rate, should be high. 
        sudo perf stat -I 1000 -e arm_cmn_0/hnf_cache_miss/,arm_cmn_0/hnf_slc_sf_cache_access/

=====================
Steps to run
=====================
1. clone this repo and make
2. change your application start command line to add
   LD_PRELOAD=/home/cr/rui-shared/tools/slc_mitigation/user/mitigation.so
3. if you want to mitigate kernel space SLC miss
   insmod ./kernel/mitigation-module.ko
4. cd ./script
5. do profiling, two ways, pmu or spe, just pick one. pids are the processes of your workload
   NOTE, you need to let your application run with real load for a while and profiling with the load.
   sudo ./profile-pmu.sh pid1 pid2
   sudo ./profile-spe.sh pid1 pid2
6. do mitigation, user or kernel, pick one or both depending on your application. For most cases, you just need to run user mitigation.
   sudo ./mitigate-user.py -p pid1 pid2 -s on
   sudo ./mitigate-kernel.py -s on
7. if you want to tune cacahe invalidating interval, current default is 1000us
   sudo ./mitigate-user.py -i xxxx   //xxxx is number in us
   sudo ./mitigate-kernel.py -i xxxx   //xxxx is number in us

You can check logs in /tmp/mitigation.log for user mitigation  or kernel message for kernel mitigation.
If mitigation is in progress, you may see:
[2024-11-20 14:42:10] 463919=====finished 10000 round  sleep 1000 us=======
